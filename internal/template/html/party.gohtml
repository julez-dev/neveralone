<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Room</title>
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        .player-wrapper {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
        }

        .video-input {
            padding-bottom: 2rem;
        }

        .ws-log {
            text-align: center;
        }

        .ws-log p {
            padding: 0.5rem;
        }
    </style>
</head>
<body>

<span>
    <p>Users in Watch-Party</p>
    <ul>
        {{range $player := .Player}}
            <li>{{$player.User.Name}} - {{$player.IsHost}}</li>
        {{end}}
    </ul>
</span>

<span class="player-wrapper">
    <div class="video-input">
        <label for="video-id">YouTube ID</label>
        <input id="video-id" type="text">

        <button id="load-video">Load new video</button>
    </div>
    <div id="player"></div>
</span>

<script type="text/javascript" src="https://www.youtube.com/iframe_api"></script>

<script>
    // Open Websocket connection
    const loc = window.location;
    let uri = 'ws:';

    if (loc.protocol === 'https:') {
        uri = 'wss:';
    }
    uri += '//' + loc.host;
    uri += loc.pathname + '/ws';

    let ignoreEvent = false
    let ws = new WebSocket(uri)
    ws.onopen = function () {}
    ws.onclose = function () {
        alert("WS was closed")
    }

    ws.onmessage = function (evt) {
        const data = JSON.parse(evt.data)

        if(!playerReady) {
            return
        }

        ignoreEvent = true;
        setTimeout(function () {
            ignoreEvent = false
        }, 400)

        switch (data.action) {
            case "rate":
                player.setPlaybackRate(data.payload.rate)
                break
            case "play":
                player.playVideo()
                player.seekTo(data.payload.timestamp)
                break
            case "pause":
                player.pauseVideo()
                player.seekTo(data.payload.timestamp)
                break
            case "load-video":
                player.loadVideoById(
                    {
                        'videoId': data.payload.id,
                        'startSeconds': 0,
                    },
                );

                player.playVideo()
                break
            case "request-state":
                const videoID = player.getVideoData().video_id
                const time = player.getCurrentTime()
                const state = player.getPlayerState()
                const rate = player.getPlaybackRate()

                let sendData = {
                    action: "sync-response",
                    payload: {
                        id: videoID,
                        timestamp: time,
                        state: state,
                        rate: rate,
                    }
                }
                ws.send(JSON.stringify(sendData))
        }
    }

    let player;
    let playerReady = false;

    document.querySelector('#load-video').addEventListener('click', function() {
        if(!playerReady) { return }

        const videoID = document.querySelector('#video-id').value;

        const data = {
            action: "load-video",
            payload: {
                id: videoID,
            }
        }

        ws.send(JSON.stringify(data))
    })

    // function is called by the script from YouTube once it's ready to be used
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '1080',
            width: '1920',
            playerVars: {
                autoplay: 0,
                controls: 2,
                autoplay: 1,
            },
            events: {
                onReady: onPlayerReady,
                onError: function (event) {},
                onPlaybackRateChange: function (event) {
                    data = {
                        action: "rate",
                        payload: {
                            rate: event.data
                        }
                    }

                    ws.send(JSON.stringify(data))
                },
                onStateChange: onPlayerStateChange
            }
        });
    }

    function onPlayerReady(event) {
        playerReady = true

        {{ if .State.VideoID}}
            event.target.loadVideoById(
                {
                    'videoId': '{{  .State.VideoID }}',
                    'startSeconds': {{ .State.Timestamp }},
                },
            )
        {{end}}

        {{ if eq .State.PlayerState 1 }}
            //  event.target.playVideo();
        {{end}}

        {{ if eq .State.PlayerState 2 }}
            event.target.pauseVideo()
        {{end}}

        event.target.setPlaybackRate({{ .State.Rate }})
    }

    function onPlayerStateChange(event) {
        if (ignoreEvent) {
            return
        }

        let data;
        switch (event.data) {
            case YT.PlayerState.PLAYING:
                 data = {
                    action: "play",
                    payload: {
                        timestamp: event.target.getCurrentTime()
                    }
                }

                ws.send(JSON.stringify(data))
                break
            case YT.PlayerState.ENDED:
                break
            case YT.PlayerState.PAUSED:
                 data = {
                    action: "pause",
                    payload: {
                        timestamp: event.target.getCurrentTime()
                    }
                }

                ws.send(JSON.stringify(data))
                break
            case YT.PlayerState.BUFFERING:
                data = {
                    action: "pause",
                    payload: {
                        timestamp: event.target.getCurrentTime()
                    }
                }

                ws.send(JSON.stringify(data))
                break
            case YT.PlayerState.CUED:
                break
        }
    }

</script>
</body>
</html>