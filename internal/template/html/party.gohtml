<!DOCTYPE html>
<html>
<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">

    <meta charset="UTF-8">
    <title>NeverAlone - Room</title>
    <style>
        .player-wrapper {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
            margin-top: 1rem;
        }

        .user-list-wrapper {
            display: flex;
            margin-top: 1rem;
            justify-content: center;
        }

        .player-chat {
            display: flex;
            width: 95%;
            flex-direction: row;
            max-height: 1080px;
        }

        #player {
            flex-grow: 1;
        }

        .chat {
            margin-left: 1rem;
            display: flex;
            flex-direction: column;
            padding: 0.5rem 1rem;
            border-radius: 1px;
            border: 1px groove #7327fc;
            flex-grow: 2;
            max-width: 350px;
        }

        .messages {
            word-wrap: break-word;
            flex-grow: 1;
            overflow: auto;
        }

        .chat-message {
            padding: 0.5rem 0;
        }

        #chat-input {
            border-top-style: groove;
            border-right-style: groove;
            border-left-style: groove;
            border-bottom-style: groove;

            margin-top: 1rem;
            margin-bottom: 1rem;
            padding: 1rem;
            resize: none;
        }

        .message-input {
            display: flex;
            flex-direction: column;
        }

        #chat-button {
            background-color: #9147ff;
            padding: 0.5rem 1rem;
            color: white;
            border-radius: 2px;
        }

        .chat-user {
            font-weight: 700;
            color: rgb(138, 43, 226);
        }

        .button-wrapper {
            display: flex;
            flex-direction: row-reverse;
        }

        .ws-log p {
            padding: 0.5rem;
        }

        .user-list {
            margin: 0;
            list-style-type: none;
            padding: 0 0 0 1rem;
        }

        .user-list li {
            padding-right: 1rem;
        }
    </style>
</head>
<body>
{{template "header" .}}

<span class="player-wrapper">
    <div class="player-chat">
        <div id="player"></div>
        <div class="chat">
            <span style="display: flex;flex-direction: column;align-items: center;">
                <p>Users in Watch-Party:</p>
                <ul class="user-list">
                </ul>
                <hr style="width: 80%">
            </span>

            <div class="messages"></div>

            <div class="message-input">
                <textarea type="text" id="chat-input" placeholder="Message"></textarea>
                <div class="button-wrapper">
                    <button id="chat-button">Chat</button>
                </div>
            </div>
        </div>
    </div>
</span>

<script type="text/javascript" src="https://www.youtube.com/iframe_api" referrerpolicy="no-referrer"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js" referrerpolicy="no-referrer"></script>

<script>
    // Open Websocket connection
    const loc = window.location;
    let uri = 'ws:';

    if (loc.protocol === 'https:') {
        uri = 'wss:';
    }
    uri += '//' + loc.host;
    uri += loc.pathname + '/ws';

    let ignoreEvent = false
    let socketReady = false
    let ws = new WebSocket(uri)

    ws.onmessage = function (evt) {
        const data = JSON.parse(evt.data)

        // if (!playerReady) {
        //     return
        // }

        ignoreEvent = true;
        setTimeout(function () {
            ignoreEvent = false
        }, 400)

        switch (data.action) {
            case "rate":
                player.setPlaybackRate(data.payload.rate)
                break
            case "play":
                player.playVideo()
                player.seekTo(data.payload.timestamp)
                break
            case "pause":
                player.pauseVideo()
                player.seekTo(data.payload.timestamp)
                break
            case "load-video":
                player.loadVideoById(
                    {
                        'videoId': getYouTubeID(data.payload.id),
                        'startSeconds': 0,
                    },
                );

                player.playVideo()
                break
            case "request-state":
                const videoID = player.getVideoData().video_id
                const time = player.getCurrentTime()
                const state = player.getPlayerState()
                const rate = player.getPlaybackRate()

                let sendData = {
                    action: "sync-response",
                    payload: {
                        id: videoID,
                        timestamp: time,
                        state: state,
                        rate: rate,
                    }
                }
                ws.send(JSON.stringify(sendData))
                break;
            case "add-message":
                addMessage(data.payload)
                break
            case "remove":
                addMessage(data.payload)
                break
            case "add-active-connection":
                addUser(data.payload.user_id, data.payload.user_name)
                break
            case "remove-active-connection":
                removeUser(data.payload.user_id)
                break
        }
    }

    ws.onopen = function () {
        socketReady = true;
    }
    ws.onclose = function () {
        socketReady = false;
        Toastify({
            text: "The connection was closed, consider refreshing the page and closing other open tabs",
            duration: 5000,
            close: true,
            offset: {
                x: '',
                y: '4rem'
            },
            style: {
                background: "linear-gradient(to right, #f53d43, #eb0e15)",
            },
            gravity: "top",
            position: "right",
            stopOnFocus: true,
        }).showToast();
    }

    let player;
    let playerReady = false;

    document.querySelector('#load-video')?.addEventListener('click', function () {
        if (!playerReady) {
            return
        }

        const videoID = document.querySelector('#video-id').value;

        const data = {
            action: "load-video",
            payload: {
                id: videoID,
            }
        }

        ws.send(JSON.stringify(data))
    })

    document.querySelector('#chat-button').addEventListener('click', function () {
        sendMessageHandler()
    })

    document.querySelector('#chat-input').addEventListener('keydown', function (event) {
        if (event.keyCode !== 13) {
            return;
        }

        event.preventDefault()
        sendMessageHandler()
    })

    function sendMessageHandler() {
        if (!socketReady) {
            return
        }

        const input = document.querySelector("#chat-input")
        const content = input.value;
        input.value = ''

        if (content == "") {
            return;
        }

        const data = {
            action: "message",
            payload: {
                content: content,
            }
        }

        ws.send(JSON.stringify(data))
    }

    // function is called by the script from YouTube once it's ready to be used
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '1080',
            width: '1920',
            playerVars: {
                autoplay: 0,
                controls: 2,
                autoplay: 1,
            },
            events: {
                onReady: onPlayerReady,
                onError: function (event) {
                },
                onPlaybackRateChange: function (event) {
                    data = {
                        action: "rate",
                        payload: {
                            rate: event.data
                        }
                    }

                    ws.send(JSON.stringify(data))
                },
                onStateChange: onPlayerStateChange
            }
        });
    }

    function onPlayerReady(event) {
        playerReady = true

        {{ if .State.VideoID}}
        event.target.loadVideoById(
            {
                'videoId': getYouTubeID('{{  .State.VideoID }}'),
                'startSeconds': {{ .State.Timestamp }},
            },
        )
        {{end}}

        {{ if eq .State.PlayerState 1 }}
        //  event.target.playVideo();
        {{end}}

        {{ if eq .State.PlayerState 2 }}
        event.target.pauseVideo()
        {{end}}

        event.target.setPlaybackRate({{ .State.Rate }})
    }

    function onPlayerStateChange(event) {
        if (ignoreEvent) {
            return
        }

        let data;
        switch (event.data) {
            case YT.PlayerState.PLAYING:
                data = {
                    action: "play",
                    payload: {
                        timestamp: event.target.getCurrentTime()
                    }
                }

                ws.send(JSON.stringify(data))
                break
            case YT.PlayerState.ENDED:
                break
            case YT.PlayerState.PAUSED:
                data = {
                    action: "pause",
                    payload: {
                        timestamp: event.target.getCurrentTime()
                    }
                }

                ws.send(JSON.stringify(data))
                break
            case YT.PlayerState.BUFFERING:
                data = {
                    action: "pause",
                    payload: {
                        timestamp: event.target.getCurrentTime()
                    }
                }

                ws.send(JSON.stringify(data))
                break
            case YT.PlayerState.CUED:
                break
        }
    }

    function addMessage(message) {
        const container = document.querySelector('.messages');
        const div = document.createElement('div')
        div.classList.add("chat-message");
        div.innerHTML = `<span class="chat-user">${message.sender}</span>: ${message.content}`
        container.appendChild(div)
        div.scrollIntoView()
    }

    function addUser(userID, username) {
        const container = document.querySelector('.user-list');
        const li = document.createElement('li')
        li.innerText = username
        li.setAttribute('data-id', userID)
        container.appendChild(li)
    }

    function removeUser(userID) {
        const container = document.querySelector('.user-list');
        Array.from(container.children).find(el => el.getAttribute('data-id') === userID)?.remove()
    }

    function getYouTubeID(id) {
        const regExp = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
        const match = id.match(regExp);
        if (match && match[2].length == 11) {
            return match[2];
        } else {
            return id
        }
    }
</script>

{{template "dark_mode"}}
</body>
</html>